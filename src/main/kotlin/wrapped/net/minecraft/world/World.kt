package wrapped.net.minecraft.world

import me.liuli.luminous.wrapper.WrapManager

open class World(val theInstance: Any = originalClass.newInstance()) {
	val isRemote: Boolean? @JvmName("G17_isRemote") get() { return WrapManager.getter(theInstance, CNF_78561, "isRemote") as Boolean? }
	var activeChunkSet: java.util.Set<*>? @JvmName("G4_activeChunkSet") get() { return WrapManager.getter(theInstance, CNF_78561, "activeChunkSet") as java.util.Set<*>? }@JvmName("S4_activeChunkSet") set(value) { WrapManager.setter(theInstance, CNF_78561, "activeChunkSet", value) }
	var spawnHostileMobs: Boolean? @JvmName("G4_spawnHostileMobs") get() { return WrapManager.getter(theInstance, CNF_78561, "spawnHostileMobs") as Boolean? }@JvmName("S4_spawnHostileMobs") set(value) { WrapManager.setter(theInstance, CNF_78561, "spawnHostileMobs", value) }
	var spawnPeacefulMobs: Boolean? @JvmName("G4_spawnPeacefulMobs") get() { return WrapManager.getter(theInstance, CNF_78561, "spawnPeacefulMobs") as Boolean? }@JvmName("S4_spawnPeacefulMobs") set(value) { WrapManager.setter(theInstance, CNF_78561, "spawnPeacefulMobs", value) }
	var lightUpdateBlockList: Array<Int>? @JvmName("G0_lightUpdateBlockList") get() { return WrapManager.getter(theInstance, CNF_78561, "lightUpdateBlockList") as Array<Int>? }@JvmName("S0_lightUpdateBlockList") set(value) { WrapManager.setter(theInstance, CNF_78561, "lightUpdateBlockList", value) }
	var skylightSubtracted: Int? @JvmName("G2_skylightSubtracted") get() { return WrapManager.getter(theInstance, CNF_78561, "skylightSubtracted") as Int? }@JvmName("S2_skylightSubtracted") set(value) { WrapManager.setter(theInstance, CNF_78561, "skylightSubtracted", value) }
	var lastLightningBolt: Int? @JvmName("G2_lastLightningBolt") get() { return WrapManager.getter(theInstance, CNF_78561, "lastLightningBolt") as Int? }@JvmName("S2_lastLightningBolt") set(value) { WrapManager.setter(theInstance, CNF_78561, "lastLightningBolt", value) }
	val theCalendar: java.util.Calendar? @JvmName("G18_theCalendar") get() { return WrapManager.getter(theInstance, CNF_78561, "theCalendar") as java.util.Calendar? }
	var ambientTickCountdown: Int? @JvmName("G2_ambientTickCountdown") get() { return WrapManager.getter(theInstance, CNF_78561, "ambientTickCountdown") as Int? }@JvmName("S2_ambientTickCountdown") set(value) { WrapManager.setter(theInstance, CNF_78561, "ambientTickCountdown", value) }
	var processingLoadedTiles: Boolean? @JvmName("G2_processingLoadedTiles") get() { return WrapManager.getter(theInstance, CNF_78561, "processingLoadedTiles") as Boolean? }@JvmName("S2_processingLoadedTiles") set(value) { WrapManager.setter(theInstance, CNF_78561, "processingLoadedTiles", value) }
	var seaLevel: Int? @JvmName("G2_seaLevel") get() { return WrapManager.getter(theInstance, CNF_78561, "seaLevel") as Int? }@JvmName("S2_seaLevel") set(value) { WrapManager.setter(theInstance, CNF_78561, "seaLevel", value) }
	val addedTileEntityList: java.util.List<*>? @JvmName("G18_addedTileEntityList") get() { return WrapManager.getter(theInstance, CNF_78561, "addedTileEntityList") as java.util.List<*>? }
	val tileEntitiesToBeRemoved: java.util.List<*>? @JvmName("G18_tileEntitiesToBeRemoved") get() { return WrapManager.getter(theInstance, CNF_78561, "tileEntitiesToBeRemoved") as java.util.List<*>? }
	var cloudColour: Long? @JvmName("G2_cloudColour") get() { return WrapManager.getter(theInstance, CNF_78561, "cloudColour") as Long? }@JvmName("S2_cloudColour") set(value) { WrapManager.setter(theInstance, CNF_78561, "cloudColour", value) }
	var scheduledUpdatesAreImmediate: Boolean? @JvmName("G4_scheduledUpdatesAreImmediate") get() { return WrapManager.getter(theInstance, CNF_78561, "scheduledUpdatesAreImmediate") as Boolean? }@JvmName("S4_scheduledUpdatesAreImmediate") set(value) { WrapManager.setter(theInstance, CNF_78561, "scheduledUpdatesAreImmediate", value) }
	val loadedEntityList: java.util.List<*>? @JvmName("G17_loadedEntityList") get() { return WrapManager.getter(theInstance, CNF_78561, "loadedEntityList") as java.util.List<*>? }
	val unloadedEntityList: java.util.List<*>? @JvmName("G20_unloadedEntityList") get() { return WrapManager.getter(theInstance, CNF_78561, "unloadedEntityList") as java.util.List<*>? }
	val loadedTileEntityList: java.util.List<*>? @JvmName("G17_loadedTileEntityList") get() { return WrapManager.getter(theInstance, CNF_78561, "loadedTileEntityList") as java.util.List<*>? }
	val tickableTileEntities: java.util.List<*>? @JvmName("G17_tickableTileEntities") get() { return WrapManager.getter(theInstance, CNF_78561, "tickableTileEntities") as java.util.List<*>? }
	val playerEntities: java.util.List<*>? @JvmName("G17_playerEntities") get() { return WrapManager.getter(theInstance, CNF_78561, "playerEntities") as java.util.List<*>? }
	val weatherEffects: java.util.List<*>? @JvmName("G17_weatherEffects") get() { return WrapManager.getter(theInstance, CNF_78561, "weatherEffects") as java.util.List<*>? }
	var updateLCG: Int? @JvmName("G4_updateLCG") get() { return WrapManager.getter(theInstance, CNF_78561, "updateLCG") as Int? }@JvmName("S4_updateLCG") set(value) { WrapManager.setter(theInstance, CNF_78561, "updateLCG", value) }
	val DIST_HASH_MAGIC: Int? @JvmName("G20_DIST_HASH_MAGIC") get() { return WrapManager.getter(theInstance, CNF_78561, "DIST_HASH_MAGIC") as Int? }
	var prevRainingStrength: Float? @JvmName("G1_prevRainingStrength") get() { return WrapManager.getter(theInstance, CNF_78561, "prevRainingStrength") as Float? }@JvmName("S1_prevRainingStrength") set(value) { WrapManager.setter(theInstance, CNF_78561, "prevRainingStrength", value) }
	var rainingStrength: Float? @JvmName("G1_rainingStrength") get() { return WrapManager.getter(theInstance, CNF_78561, "rainingStrength") as Float? }@JvmName("S1_rainingStrength") set(value) { WrapManager.setter(theInstance, CNF_78561, "rainingStrength", value) }
	var prevThunderingStrength: Float? @JvmName("G1_prevThunderingStrength") get() { return WrapManager.getter(theInstance, CNF_78561, "prevThunderingStrength") as Float? }@JvmName("S1_prevThunderingStrength") set(value) { WrapManager.setter(theInstance, CNF_78561, "prevThunderingStrength", value) }
	var thunderingStrength: Float? @JvmName("G1_thunderingStrength") get() { return WrapManager.getter(theInstance, CNF_78561, "thunderingStrength") as Float? }@JvmName("S1_thunderingStrength") set(value) { WrapManager.setter(theInstance, CNF_78561, "thunderingStrength", value) }
	val rand: java.util.Random? @JvmName("G17_rand") get() { return WrapManager.getter(theInstance, CNF_78561, "rand") as java.util.Random? }
	var worldAccesses: java.util.List<*>? @JvmName("G4_worldAccesses") get() { return WrapManager.getter(theInstance, CNF_78561, "worldAccesses") as java.util.List<*>? }@JvmName("S4_worldAccesses") set(value) { WrapManager.setter(theInstance, CNF_78561, "worldAccesses", value) }
	var findingSpawnPoint: Boolean? @JvmName("G4_findingSpawnPoint") get() { return WrapManager.getter(theInstance, CNF_78561, "findingSpawnPoint") as Boolean? }@JvmName("S4_findingSpawnPoint") set(value) { WrapManager.setter(theInstance, CNF_78561, "findingSpawnPoint", value) }
	@JvmName("M1_getProviderName") fun getProviderName(): String?{ return WrapManager.call(theInstance, CNF_78561, "getProviderName", "()Ljava/lang/String;") as String? }
	@JvmName("M1_isBlockIndirectlyGettingPowered") fun isBlockIndirectlyGettingPowered(p0: Any?): Int?{ return WrapManager.call(theInstance, CNF_78561, "isBlockIndirectlyGettingPowered", "(Lnet/minecraft/util/BlockPos;)I", p0) as Int? }
	@JvmName("M1_calculateInitialSkylight") fun calculateInitialSkylight(){  WrapManager.call(theInstance, CNF_78561, "calculateInitialSkylight", "()V") }
	@JvmName("M1_setSpawnPoint") fun setSpawnPoint(p0: Any?){  WrapManager.call(theInstance, CNF_78561, "setSpawnPoint", "(Lnet/minecraft/util/BlockPos;)V", p0) }
	@JvmName("M4_calculateInitialWeather") fun calculateInitialWeather(){  WrapManager.call(theInstance, CNF_78561, "calculateInitialWeather", "()V") }
	@JvmName("M1_isRainingAt") fun isRainingAt(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isRainingAt", "(Lnet/minecraft/util/BlockPos;)Z", p0) as Boolean? }
	@JvmName("M4_setActivePlayerChunksAndCheckLight") fun setActivePlayerChunksAndCheckLight(){  WrapManager.call(theInstance, CNF_78561, "setActivePlayerChunksAndCheckLight", "()V") }
	@JvmName("M1_isBlockinHighHumidity") fun isBlockinHighHumidity(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isBlockinHighHumidity", "(Lnet/minecraft/util/BlockPos;)Z", p0) as Boolean? }
	@JvmName("M1_getSeaLevel") fun getSeaLevel(): Int?{ return WrapManager.call(theInstance, CNF_78561, "getSeaLevel", "()I") as Int? }
	@JvmName("M2_isWater") fun isWater(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isWater", "(Lnet/minecraft/util/BlockPos;)Z", p0) as Boolean? }
	@JvmName("M1_sendQuittingDisconnectingPacket") fun sendQuittingDisconnectingPacket(){  WrapManager.call(theInstance, CNF_78561, "sendQuittingDisconnectingPacket", "()V") }
	@JvmName("M1_checkSessionLock") fun checkSessionLock(){  WrapManager.call(theInstance, CNF_78561, "checkSessionLock", "()V") }
	@JvmName("M1_getSeed") fun getSeed(): Long?{ return WrapManager.call(theInstance, CNF_78561, "getSeed", "()J") as Long? }
	@JvmName("M1_getTotalWorldTime") fun getTotalWorldTime(): Long?{ return WrapManager.call(theInstance, CNF_78561, "getTotalWorldTime", "()J") as Long? }
	@JvmName("M1_getWorldTime") fun getWorldTime(): Long?{ return WrapManager.call(theInstance, CNF_78561, "getWorldTime", "()J") as Long? }
	@JvmName("M1_isThundering") fun isThundering(): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isThundering", "()Z") as Boolean? }
	@JvmName("M1_isRaining") fun isRaining(): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isRaining", "()Z") as Boolean? }
	@JvmName("M1_getHeight") fun getHeight(): Int?{ return WrapManager.call(theInstance, CNF_78561, "getHeight", "()I") as Int? }
	@JvmName("M1_getActualHeight") fun getActualHeight(): Int?{ return WrapManager.call(theInstance, CNF_78561, "getActualHeight", "()I") as Int? }
	@JvmName("M1_extendedLevelsInChunkCache") fun extendedLevelsInChunkCache(): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "extendedLevelsInChunkCache", "()Z") as Boolean? }
	@JvmName("M1_getHorizon") fun getHorizon(): Double?{ return WrapManager.call(theInstance, CNF_78561, "getHorizon", "()D") as Double? }
	@JvmName("M1_getCurrentDate") fun getCurrentDate(): java.util.Calendar?{ return WrapManager.call(theInstance, CNF_78561, "getCurrentDate", "()Ljava/util/Calendar;") as java.util.Calendar? }
	@JvmName("M1_getClosestPlayer") fun getClosestPlayer(p0: Double?, p1: Double?, p2: Double?, p3: Double?): wrapped.net.minecraft.entity.player.EntityPlayer?{ return wrapped.net.minecraft.entity.player.EntityPlayer(WrapManager.call(theInstance, CNF_78561, "getClosestPlayer", "(DDDD)Lnet/minecraft/entity/player/EntityPlayer;", p0,p1,p2,p3)?:return null) }
	@JvmName("M1_makeFireworks") fun makeFireworks(p0: Double?, p1: Double?, p2: Double?, p3: Double?, p4: Double?, p5: Double?, p6: Any?){  WrapManager.call(theInstance, CNF_78561, "makeFireworks", "(DDDDDDLnet/minecraft/nbt/NBTTagCompound;)V", p0,p1,p2,p3,p4,p5,p6) }
	@JvmName("M1_playSoundEffect") fun playSoundEffect(p0: Double?, p1: Double?, p2: Double?, p3: String?, p4: Float?, p5: Float?){  WrapManager.call(theInstance, CNF_78561, "playSoundEffect", "(DDDLjava/lang/String;FF)V", p0,p1,p2,p3,p4,p5) }
	@JvmName("M1_playSound") fun playSound(p0: Double?, p1: Double?, p2: Double?, p3: String?, p4: Float?, p5: Float?, p6: Boolean?){  WrapManager.call(theInstance, CNF_78561, "playSound", "(DDDLjava/lang/String;FFZ)V", p0,p1,p2,p3,p4,p5,p6) }
	@JvmName("M1_calculateSkylightSubtracted") fun calculateSkylightSubtracted(p0: Float?): Int?{ return WrapManager.call(theInstance, CNF_78561, "calculateSkylightSubtracted", "(F)I", p0) as Int? }
	@JvmName("M1_getEntityByID") fun getEntityByID(p0: Int?): wrapped.net.minecraft.entity.Entity?{ return wrapped.net.minecraft.entity.Entity(WrapManager.call(theInstance, CNF_78561, "getEntityByID", "(I)Lnet/minecraft/entity/Entity;", p0)?:return null) }
	@JvmName("M1_setRandomSeed") fun setRandomSeed(p0: Int?, p1: Int?, p2: Int?): java.util.Random?{ return WrapManager.call(theInstance, CNF_78561, "setRandomSeed", "(III)Ljava/util/Random;", p0,p1,p2) as java.util.Random? }
	@JvmName("M1_markBlocksDirtyVertical") fun markBlocksDirtyVertical(p0: Int?, p1: Int?, p2: Int?, p3: Int?){  WrapManager.call(theInstance, CNF_78561, "markBlocksDirtyVertical", "(IIII)V", p0,p1,p2,p3) }
	@JvmName("M2_isAreaLoaded") fun isAreaLoaded(p0: Int?, p1: Int?, p2: Int?, p3: Int?, p4: Int?, p5: Int?, p6: Boolean?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isAreaLoaded", "(IIIIIIZ)Z", p0,p1,p2,p3,p4,p5,p6) as Boolean? }
	@JvmName("M4_playMoodSoundAndCheckLight") fun playMoodSoundAndCheckLight(p0: Int?, p1: Int?, p2: Any?){  WrapManager.call(theInstance, CNF_78561, "playMoodSoundAndCheckLight", "(IILnet/minecraft/world/chunk/Chunk;)V", p0,p1,p2) }
	@JvmName("M4_isChunkLoaded") fun isChunkLoaded(p0: Int?, p1: Int?, p2: Boolean?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isChunkLoaded", "(IIZ)Z", p0,p1,p2) as Boolean? }
	@JvmName("M1_playBroadcastSound") fun playBroadcastSound(p0: Int?, p1: Any?, p2: Int?){  WrapManager.call(theInstance, CNF_78561, "playBroadcastSound", "(ILnet/minecraft/util/BlockPos;I)V", p0,p1,p2) }
	@JvmName("M130_spawnParticle") fun spawnParticle(p0: Int?, p1: Boolean?, p2: Double?, p3: Double?, p4: Double?, p5: Double?, p6: Double?, p7: Double?, p8: Array<Int>?){  WrapManager.call(theInstance, CNF_78561, "spawnParticle", "(IZDDDDDD[I)V", p0,p1,p2,p3,p4,p5,p6,p7,p8) }
	@JvmName("M1_setTotalWorldTime") fun setTotalWorldTime(p0: Long?){  WrapManager.call(theInstance, CNF_78561, "setTotalWorldTime", "(J)V", p0) }
	@JvmName("M1_addWorldAccess") fun addWorldAccess(p0: Any?){  WrapManager.call(theInstance, CNF_78561, "addWorldAccess", "(Lnet/minecraft/world/IWorldAccess;)V", p0) }
	@JvmName("M1_initialize") fun initialize(p0: Any?){  WrapManager.call(theInstance, CNF_78561, "initialize", "(Lnet/minecraft/world/WorldSettings;)V", p0) }
	@JvmName("M1_getLightFromNeighborsFor") fun getLightFromNeighborsFor(p0: Any?, p1: Any?): Int?{ return WrapManager.call(theInstance, CNF_78561, "getLightFromNeighborsFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/BlockPos;)I", p0,p1) as Int? }
	@JvmName("M1_setLightFor") fun setLightFor(p0: Any?, p1: Any?, p2: Int?){  WrapManager.call(theInstance, CNF_78561, "setLightFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/BlockPos;I)V", p0,p1,p2) }
	@JvmName("M1_forceBlockUpdateTick") fun forceBlockUpdateTick(p0: Any?, p1: Any?, p2: java.util.Random?){  WrapManager.call(theInstance, CNF_78561, "forceBlockUpdateTick", "(Lnet/minecraft/block/Block;Lnet/minecraft/util/BlockPos;Ljava/util/Random;)V", p0,p1,p2) }
	@JvmName("M1_canBlockBePlaced") fun canBlockBePlaced(p0: Any?, p1: Any?, p2: Boolean?, p3: Any?, p4: wrapped.net.minecraft.entity.Entity?, p5: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "canBlockBePlaced", "(Lnet/minecraft/block/Block;Lnet/minecraft/util/BlockPos;ZLnet/minecraft/util/EnumFacing;Lnet/minecraft/entity/Entity;Lnet/minecraft/item/ItemStack;)Z", p0,p1,p2,p3,p4?.theInstance,p5) as Boolean? }
	@JvmName("M1_addTileEntity") fun addTileEntity(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "addTileEntity", "(Lnet/minecraft/tileentity/TileEntity;)Z", p0) as Boolean? }
	@JvmName("M1_isInsideBorder") fun isInsideBorder(p0: Any?, p1: wrapped.net.minecraft.entity.Entity?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isInsideBorder", "(Lnet/minecraft/world/border/WorldBorder;Lnet/minecraft/entity/Entity;)Z", p0,p1?.theInstance) as Boolean? }
	@JvmName("M1_isAreaLoaded") fun isAreaLoaded(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isAreaLoaded", "(Lnet/minecraft/world/gen/structure/StructureBoundingBox;)Z", p0) as Boolean? }
	@JvmName("M1_isMaterialInBB") fun isMaterialInBB(p0: Any?, p1: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isMaterialInBB", "(Lnet/minecraft/util/AxisAlignedBB;Lnet/minecraft/block/material/Material;)Z", p0,p1) as Boolean? }
	@JvmName("M1_handleMaterialAcceleration") fun handleMaterialAcceleration(p0: Any?, p1: Any?, p2: wrapped.net.minecraft.entity.Entity?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "handleMaterialAcceleration", "(Lnet/minecraft/util/AxisAlignedBB;Lnet/minecraft/block/material/Material;Lnet/minecraft/entity/Entity;)Z", p0,p1,p2?.theInstance) as Boolean? }
	@JvmName("M1_checkNoEntityCollision") fun checkNoEntityCollision(p0: Any?, p1: wrapped.net.minecraft.entity.Entity?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "checkNoEntityCollision", "(Lnet/minecraft/util/AxisAlignedBB;Lnet/minecraft/entity/Entity;)Z", p0,p1?.theInstance) as Boolean? }
	@JvmName("M1_getBlockDensity") fun getBlockDensity(p0: Any?, p1: Any?): Float?{ return WrapManager.call(theInstance, CNF_78561, "getBlockDensity", "(Lnet/minecraft/util/Vec3;Lnet/minecraft/util/AxisAlignedBB;)F", p0,p1) as Float? }
	@JvmName("M2_isValid") fun isValid(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isValid", "(Lnet/minecraft/util/BlockPos;)Z", p0) as Boolean? }
	@JvmName("M1_isAreaLoaded") fun isAreaLoaded(p0: Any?, p1: Int?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isAreaLoaded", "(Lnet/minecraft/util/BlockPos;I)Z", p0,p1) as Boolean? }
	@JvmName("M1_isAreaLoaded") fun isAreaLoaded(p0: Any?, p1: Int?, p2: Boolean?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isAreaLoaded", "(Lnet/minecraft/util/BlockPos;IZ)Z", p0,p1,p2) as Boolean? }
	@JvmName("M2_getRawLight") fun getRawLight(p0: Any?, p1: Any?): Int?{ return WrapManager.call(theInstance, CNF_78561, "getRawLight", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/world/EnumSkyBlock;)I", p0,p1) as Int? }
	@JvmName("M1_isBlockTickPending") fun isBlockTickPending(p0: Any?, p1: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isBlockTickPending", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;)Z", p0,p1) as Boolean? }
	@JvmName("M1_scheduleUpdate") fun scheduleUpdate(p0: Any?, p1: Any?, p2: Int?){  WrapManager.call(theInstance, CNF_78561, "scheduleUpdate", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;I)V", p0,p1,p2) }
	@JvmName("M1_updateBlockTick") fun updateBlockTick(p0: Any?, p1: Any?, p2: Int?, p3: Int?){  WrapManager.call(theInstance, CNF_78561, "updateBlockTick", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;II)V", p0,p1,p2,p3) }
	@JvmName("M1_notifyNeighborsOfStateExcept") fun notifyNeighborsOfStateExcept(p0: Any?, p1: Any?, p2: Any?){  WrapManager.call(theInstance, CNF_78561, "notifyNeighborsOfStateExcept", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;Lnet/minecraft/util/EnumFacing;)V", p0,p1,p2) }
	@JvmName("M1_setTileEntity") fun setTileEntity(p0: Any?, p1: Any?){  WrapManager.call(theInstance, CNF_78561, "setTileEntity", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/tileentity/TileEntity;)V", p0,p1) }
	@JvmName("M1_setBlockState") fun setBlockState(p0: Any?, p1: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "setBlockState", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;)Z", p0,p1) as Boolean? }
	@JvmName("M1_setBlockState") fun setBlockState(p0: Any?, p1: Any?, p2: Int?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "setBlockState", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/state/IBlockState;I)Z", p0,p1,p2) as Boolean? }
	@JvmName("M1_isAreaLoaded") fun isAreaLoaded(p0: Any?, p1: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isAreaLoaded", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/BlockPos;)Z", p0,p1) as Boolean? }
	@JvmName("M1_isAreaLoaded") fun isAreaLoaded(p0: Any?, p1: Any?, p2: Boolean?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isAreaLoaded", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/BlockPos;Z)Z", p0,p1,p2) as Boolean? }
	@JvmName("M1_getStrongPower") fun getStrongPower(p0: Any?, p1: Any?): Int?{ return WrapManager.call(theInstance, CNF_78561, "getStrongPower", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;)I", p0,p1) as Int? }
	@JvmName("M1_playRecord") fun playRecord(p0: Any?, p1: String?){  WrapManager.call(theInstance, CNF_78561, "playRecord", "(Lnet/minecraft/util/BlockPos;Ljava/lang/String;)V", p0,p1) }
	@JvmName("M1_isBlockLoaded") fun isBlockLoaded(p0: Any?, p1: Boolean?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isBlockLoaded", "(Lnet/minecraft/util/BlockPos;Z)Z", p0,p1) as Boolean? }
	@JvmName("M129_spawnParticle") fun spawnParticle(p0: Any?, p1: Double?, p2: Double?, p3: Double?, p4: Double?, p5: Double?, p6: Double?, p7: Array<Int>?){  WrapManager.call(theInstance, CNF_78561, "spawnParticle", "(Lnet/minecraft/util/EnumParticleTypes;DDDDDD[I)V", p0,p1,p2,p3,p4,p5,p6,p7) }
	@JvmName("M129_spawnParticle") fun spawnParticle(p0: Any?, p1: Boolean?, p2: Double?, p3: Double?, p4: Double?, p5: Double?, p6: Double?, p7: Double?, p8: Array<Int>?){  WrapManager.call(theInstance, CNF_78561, "spawnParticle", "(Lnet/minecraft/util/EnumParticleTypes;ZDDDDDD[I)V", p0,p1,p2,p3,p4,p5,p6,p7,p8) }
	@JvmName("M1_getPlayerEntityByName") fun getPlayerEntityByName(p0: String?): wrapped.net.minecraft.entity.player.EntityPlayer?{ return wrapped.net.minecraft.entity.player.EntityPlayer(WrapManager.call(theInstance, CNF_78561, "getPlayerEntityByName", "(Ljava/lang/String;)Lnet/minecraft/entity/player/EntityPlayer;", p0)?:return null) }
	@JvmName("M1_setItemData") fun setItemData(p0: String?, p1: Any?){  WrapManager.call(theInstance, CNF_78561, "setItemData", "(Ljava/lang/String;Lnet/minecraft/world/WorldSavedData;)V", p0,p1) }
	@JvmName("M1_onEntityAdded") fun onEntityAdded(p0: wrapped.net.minecraft.entity.Entity?){  WrapManager.call(theInstance, CNF_78561, "onEntityAdded", "(Lnet/minecraft/entity/Entity;)V", p0?.theInstance) }
	@JvmName("M1_setEntityState") fun setEntityState(p0: wrapped.net.minecraft.entity.Entity?, p1: Byte?){  WrapManager.call(theInstance, CNF_78561, "setEntityState", "(Lnet/minecraft/entity/Entity;B)V", p0?.theInstance,p1) }
	@JvmName("M1_getClosestPlayerToEntity") fun getClosestPlayerToEntity(p0: wrapped.net.minecraft.entity.Entity?, p1: Double?): wrapped.net.minecraft.entity.player.EntityPlayer?{ return wrapped.net.minecraft.entity.player.EntityPlayer(WrapManager.call(theInstance, CNF_78561, "getClosestPlayerToEntity", "(Lnet/minecraft/entity/Entity;D)Lnet/minecraft/entity/player/EntityPlayer;", p0?.theInstance,p1)?:return null) }
	@JvmName("M1_playSoundAtEntity") fun playSoundAtEntity(p0: wrapped.net.minecraft.entity.Entity?, p1: String?, p2: Float?, p3: Float?){  WrapManager.call(theInstance, CNF_78561, "playSoundAtEntity", "(Lnet/minecraft/entity/Entity;Ljava/lang/String;FF)V", p0?.theInstance,p1,p2,p3) }
	@JvmName("M1_updateEntityWithOptionalForce") fun updateEntityWithOptionalForce(p0: wrapped.net.minecraft.entity.Entity?, p1: Boolean?){  WrapManager.call(theInstance, CNF_78561, "updateEntityWithOptionalForce", "(Lnet/minecraft/entity/Entity;Z)V", p0?.theInstance,p1) }
	@JvmName("M1_playAuxSFXAtEntity") fun playAuxSFXAtEntity(p0: wrapped.net.minecraft.entity.player.EntityPlayer?, p1: Int?, p2: Any?, p3: Int?){  WrapManager.call(theInstance, CNF_78561, "playAuxSFXAtEntity", "(Lnet/minecraft/entity/player/EntityPlayer;ILnet/minecraft/util/BlockPos;I)V", p0?.theInstance,p1,p2,p3) }
	@JvmName("M1_isBlockModifiable") fun isBlockModifiable(p0: wrapped.net.minecraft.entity.player.EntityPlayer?, p1: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isBlockModifiable", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/util/BlockPos;)Z", p0?.theInstance,p1) as Boolean? }
	@JvmName("M1_extinguishFire") fun extinguishFire(p0: wrapped.net.minecraft.entity.player.EntityPlayer?, p1: Any?, p2: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "extinguishFire", "(Lnet/minecraft/entity/player/EntityPlayer;Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;)Z", p0?.theInstance,p1,p2) as Boolean? }
	@JvmName("M1_playSoundToNearExcept") fun playSoundToNearExcept(p0: wrapped.net.minecraft.entity.player.EntityPlayer?, p1: String?, p2: Float?, p3: Float?){  WrapManager.call(theInstance, CNF_78561, "playSoundToNearExcept", "(Lnet/minecraft/entity/player/EntityPlayer;Ljava/lang/String;FF)V", p0?.theInstance,p1,p2,p3) }
	@JvmName("M1_tickUpdates") fun tickUpdates(p0: Boolean?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "tickUpdates", "(Z)Z", p0) as Boolean? }
	@JvmName("M1_setAllowedSpawnTypes") fun setAllowedSpawnTypes(p0: Boolean?, p1: Boolean?){  WrapManager.call(theInstance, CNF_78561, "setAllowedSpawnTypes", "(ZZ)V", p0,p1) }
	@JvmName("M1_getSkylightSubtracted") fun getSkylightSubtracted(): Int?{ return WrapManager.call(theInstance, CNF_78561, "getSkylightSubtracted", "()I") as Int? }
	@JvmName("M1_getLastLightningBolt") fun getLastLightningBolt(): Int?{ return WrapManager.call(theInstance, CNF_78561, "getLastLightningBolt", "()I") as Int? }
	@JvmName("M1_isFindingSpawnPoint") fun isFindingSpawnPoint(): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isFindingSpawnPoint", "()Z") as Boolean? }
	@JvmName("M1_init") fun init(): wrapped.net.minecraft.world.World?{ return wrapped.net.minecraft.world.World(WrapManager.call(theInstance, CNF_78561, "init", "()Lnet/minecraft/world/World;")?:return null) }
	@JvmName("M1_isAnyPlayerWithinRangeAt") fun isAnyPlayerWithinRangeAt(p0: Double?, p1: Double?, p2: Double?, p3: Double?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isAnyPlayerWithinRangeAt", "(DDDD)Z", p0,p1,p2,p3) as Boolean? }
	@JvmName("M1_getSunBrightness") fun getSunBrightness(p0: Float?): Float?{ return WrapManager.call(theInstance, CNF_78561, "getSunBrightness", "(F)F", p0) as Float? }
	@JvmName("M1_setSeaLevel") fun setSeaLevel(p0: Int?){  WrapManager.call(theInstance, CNF_78561, "setSeaLevel", "(I)V", p0) }
	@JvmName("M1_getChunksLowestHorizon") fun getChunksLowestHorizon(p0: Int?, p1: Int?): Int?{ return WrapManager.call(theInstance, CNF_78561, "getChunksLowestHorizon", "(II)I", p0,p1) as Int? }
	@JvmName("M1_markBlockRangeForRenderUpdate") fun markBlockRangeForRenderUpdate(p0: Int?, p1: Int?, p2: Int?, p3: Int?, p4: Int?, p5: Int?){  WrapManager.call(theInstance, CNF_78561, "markBlockRangeForRenderUpdate", "(IIIIII)V", p0,p1,p2,p3,p4,p5) }
	@JvmName("M1_playAuxSFX") fun playAuxSFX(p0: Int?, p1: Any?, p2: Int?){  WrapManager.call(theInstance, CNF_78561, "playAuxSFX", "(ILnet/minecraft/util/BlockPos;I)V", p0,p1,p2) }
	@JvmName("M1_setWorldTime") fun setWorldTime(p0: Long?){  WrapManager.call(theInstance, CNF_78561, "setWorldTime", "(J)V", p0) }
	@JvmName("M1_removeWorldAccess") fun removeWorldAccess(p0: Any?){  WrapManager.call(theInstance, CNF_78561, "removeWorldAccess", "(Lnet/minecraft/world/IWorldAccess;)V", p0) }
	@JvmName("M1_getLightFor") fun getLightFor(p0: Any?, p1: Any?): Int?{ return WrapManager.call(theInstance, CNF_78561, "getLightFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/BlockPos;)I", p0,p1) as Int? }
	@JvmName("M1_markTileEntityForRemoval") fun markTileEntityForRemoval(p0: Any?){  WrapManager.call(theInstance, CNF_78561, "markTileEntityForRemoval", "(Lnet/minecraft/tileentity/TileEntity;)V", p0) }
	@JvmName("M1_isAreaLoaded") fun isAreaLoaded(p0: Any?, p1: Boolean?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isAreaLoaded", "(Lnet/minecraft/world/gen/structure/StructureBoundingBox;Z)Z", p0,p1) as Boolean? }
	@JvmName("M1_checkNoEntityCollision") fun checkNoEntityCollision(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "checkNoEntityCollision", "(Lnet/minecraft/util/AxisAlignedBB;)Z", p0) as Boolean? }
	@JvmName("M1_isAABBInMaterial") fun isAABBInMaterial(p0: Any?, p1: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isAABBInMaterial", "(Lnet/minecraft/util/AxisAlignedBB;Lnet/minecraft/block/material/Material;)Z", p0,p1) as Boolean? }
	@JvmName("M1_getCombinedLight") fun getCombinedLight(p0: Any?, p1: Int?): Int?{ return WrapManager.call(theInstance, CNF_78561, "getCombinedLight", "(Lnet/minecraft/util/BlockPos;I)I", p0,p1) as Int? }
	@JvmName("M1_notifyNeighborsRespectDebug") fun notifyNeighborsRespectDebug(p0: Any?, p1: Any?){  WrapManager.call(theInstance, CNF_78561, "notifyNeighborsRespectDebug", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;)V", p0,p1) }
	@JvmName("M1_scheduleBlockUpdate") fun scheduleBlockUpdate(p0: Any?, p1: Any?, p2: Int?, p3: Int?){  WrapManager.call(theInstance, CNF_78561, "scheduleBlockUpdate", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;II)V", p0,p1,p2,p3) }
	@JvmName("M1_markChunkDirty") fun markChunkDirty(p0: Any?, p1: Any?){  WrapManager.call(theInstance, CNF_78561, "markChunkDirty", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/tileentity/TileEntity;)V", p0,p1) }
	@JvmName("M1_markBlockRangeForRenderUpdate") fun markBlockRangeForRenderUpdate(p0: Any?, p1: Any?){  WrapManager.call(theInstance, CNF_78561, "markBlockRangeForRenderUpdate", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/BlockPos;)V", p0,p1) }
	@JvmName("M1_isSidePowered") fun isSidePowered(p0: Any?, p1: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isSidePowered", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;)Z", p0,p1) as Boolean? }
	@JvmName("M1_destroyBlock") fun destroyBlock(p0: Any?, p1: Boolean?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "destroyBlock", "(Lnet/minecraft/util/BlockPos;Z)Z", p0,p1) as Boolean? }
	@JvmName("M1_getUniqueDataId") fun getUniqueDataId(p0: String?): Int?{ return WrapManager.call(theInstance, CNF_78561, "getUniqueDataId", "(Ljava/lang/String;)I", p0) as Int? }
	@JvmName("M1_getPlayerEntityByUUID") fun getPlayerEntityByUUID(p0: java.util.UUID?): wrapped.net.minecraft.entity.player.EntityPlayer?{ return wrapped.net.minecraft.entity.player.EntityPlayer(WrapManager.call(theInstance, CNF_78561, "getPlayerEntityByUUID", "(Ljava/util/UUID;)Lnet/minecraft/entity/player/EntityPlayer;", p0)?:return null) }
	@JvmName("M1_onEntityRemoved") fun onEntityRemoved(p0: wrapped.net.minecraft.entity.Entity?){  WrapManager.call(theInstance, CNF_78561, "onEntityRemoved", "(Lnet/minecraft/entity/Entity;)V", p0?.theInstance) }
	@JvmName("M1_tick") fun tick(){  WrapManager.call(theInstance, CNF_78561, "tick", "()V") }
	@JvmName("M1_getCelestialAngle") fun getCelestialAngle(p0: Float?): Float?{ return WrapManager.call(theInstance, CNF_78561, "getCelestialAngle", "(F)F", p0) as Float? }
	@JvmName("M1_setSkylightSubtracted") fun setSkylightSubtracted(p0: Int?){  WrapManager.call(theInstance, CNF_78561, "setSkylightSubtracted", "(I)V", p0) }
	@JvmName("M1_isSpawnChunk") fun isSpawnChunk(p0: Int?, p1: Int?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isSpawnChunk", "(II)Z", p0,p1) as Boolean? }
	@JvmName("M1_sendBlockBreakProgress") fun sendBlockBreakProgress(p0: Int?, p1: Any?, p2: Int?){  WrapManager.call(theInstance, CNF_78561, "sendBlockBreakProgress", "(ILnet/minecraft/util/BlockPos;I)V", p0,p1,p2) }
	@JvmName("M1_checkLightFor") fun checkLightFor(p0: Any?, p1: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "checkLightFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/BlockPos;)Z", p0,p1) as Boolean? }
	@JvmName("M1_checkBlockCollision") fun checkBlockCollision(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "checkBlockCollision", "(Lnet/minecraft/util/AxisAlignedBB;)Z", p0) as Boolean? }
	@JvmName("M1_notifyNeighborsOfStateChange") fun notifyNeighborsOfStateChange(p0: Any?, p1: Any?){  WrapManager.call(theInstance, CNF_78561, "notifyNeighborsOfStateChange", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;)V", p0,p1) }
	@JvmName("M1_addBlockEvent") fun addBlockEvent(p0: Any?, p1: Any?, p2: Int?, p3: Int?){  WrapManager.call(theInstance, CNF_78561, "addBlockEvent", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;II)V", p0,p1,p2,p3) }
	@JvmName("M1_getRedstonePower") fun getRedstonePower(p0: Any?, p1: Any?): Int?{ return WrapManager.call(theInstance, CNF_78561, "getRedstonePower", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/util/EnumFacing;)I", p0,p1) as Int? }
	@JvmName("M1_getLight") fun getLight(p0: Any?, p1: Boolean?): Int?{ return WrapManager.call(theInstance, CNF_78561, "getLight", "(Lnet/minecraft/util/BlockPos;Z)I", p0,p1) as Int? }
	@JvmName("M1_addWeatherEffect") fun addWeatherEffect(p0: wrapped.net.minecraft.entity.Entity?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "addWeatherEffect", "(Lnet/minecraft/entity/Entity;)Z", p0?.theInstance) as Boolean? }
	@JvmName("M1_updateAllPlayersSleepingFlag") fun updateAllPlayersSleepingFlag(){  WrapManager.call(theInstance, CNF_78561, "updateAllPlayersSleepingFlag", "()V") }
	@JvmName("M1_getCelestialAngleRadians") fun getCelestialAngleRadians(p0: Float?): Float?{ return WrapManager.call(theInstance, CNF_78561, "getCelestialAngleRadians", "(F)F", p0) as Float? }
	@JvmName("M1_setLastLightningBolt") fun setLastLightningBolt(p0: Int?){  WrapManager.call(theInstance, CNF_78561, "setLastLightningBolt", "(I)V", p0) }
	@JvmName("M1_isAnyLiquid") fun isAnyLiquid(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isAnyLiquid", "(Lnet/minecraft/util/AxisAlignedBB;)Z", p0) as Boolean? }
	@JvmName("M1_isAirBlock") fun isAirBlock(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isAirBlock", "(Lnet/minecraft/util/BlockPos;)Z", p0) as Boolean? }
	@JvmName("M1_notifyBlockOfStateChange") fun notifyBlockOfStateChange(p0: Any?, p1: Any?){  WrapManager.call(theInstance, CNF_78561, "notifyBlockOfStateChange", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;)V", p0,p1) }
	@JvmName("M1_isBlockNormalCube") fun isBlockNormalCube(p0: Any?, p1: Boolean?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isBlockNormalCube", "(Lnet/minecraft/util/BlockPos;Z)Z", p0,p1) as Boolean? }
	@JvmName("M1_spawnEntityInWorld") fun spawnEntityInWorld(p0: wrapped.net.minecraft.entity.Entity?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "spawnEntityInWorld", "(Lnet/minecraft/entity/Entity;)Z", p0?.theInstance) as Boolean? }
	@JvmName("M1_isFlammableWithin") fun isFlammableWithin(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isFlammableWithin", "(Lnet/minecraft/util/AxisAlignedBB;)Z", p0) as Boolean? }
	@JvmName("M1_isBlockLoaded") fun isBlockLoaded(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isBlockLoaded", "(Lnet/minecraft/util/BlockPos;)Z", p0) as Boolean? }
	@JvmName("M1_updateComparatorOutputLevel") fun updateComparatorOutputLevel(p0: Any?, p1: Any?){  WrapManager.call(theInstance, CNF_78561, "updateComparatorOutputLevel", "(Lnet/minecraft/util/BlockPos;Lnet/minecraft/block/Block;)V", p0,p1) }
	@JvmName("M1_canBlockFreeze") fun canBlockFreeze(p0: Any?, p1: Boolean?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "canBlockFreeze", "(Lnet/minecraft/util/BlockPos;Z)Z", p0,p1) as Boolean? }
	@JvmName("M1_removeEntity") fun removeEntity(p0: wrapped.net.minecraft.entity.Entity?){  WrapManager.call(theInstance, CNF_78561, "removeEntity", "(Lnet/minecraft/entity/Entity;)V", p0?.theInstance) }
	@JvmName("M1_canSnowAt") fun canSnowAt(p0: Any?, p1: Boolean?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "canSnowAt", "(Lnet/minecraft/util/BlockPos;Z)Z", p0,p1) as Boolean? }
	@JvmName("M1_removePlayerEntityDangerously") fun removePlayerEntityDangerously(p0: wrapped.net.minecraft.entity.Entity?){  WrapManager.call(theInstance, CNF_78561, "removePlayerEntityDangerously", "(Lnet/minecraft/entity/Entity;)V", p0?.theInstance) }
	@JvmName("M1_setInitialSpawnLocation") fun setInitialSpawnLocation(){  WrapManager.call(theInstance, CNF_78561, "setInitialSpawnLocation", "()V") }
	@JvmName("M1_getStarBrightness") fun getStarBrightness(p0: Float?): Float?{ return WrapManager.call(theInstance, CNF_78561, "getStarBrightness", "(F)F", p0) as Float? }
	@JvmName("M1_setBlockToAir") fun setBlockToAir(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "setBlockToAir", "(Lnet/minecraft/util/BlockPos;)Z", p0) as Boolean? }
	@JvmName("M1_updateEntity") fun updateEntity(p0: wrapped.net.minecraft.entity.Entity?){  WrapManager.call(theInstance, CNF_78561, "updateEntity", "(Lnet/minecraft/entity/Entity;)V", p0?.theInstance) }
	@JvmName("M4_updateBlocks") fun updateBlocks(){  WrapManager.call(theInstance, CNF_78561, "updateBlocks", "()V") }
	@JvmName("M1_getThunderStrength") fun getThunderStrength(p0: Float?): Float?{ return WrapManager.call(theInstance, CNF_78561, "getThunderStrength", "(F)F", p0) as Float? }
	@JvmName("M1_markBlockForUpdate") fun markBlockForUpdate(p0: Any?){  WrapManager.call(theInstance, CNF_78561, "markBlockForUpdate", "(Lnet/minecraft/util/BlockPos;)V", p0) }
	@JvmName("M1_joinEntityInSurroundings") fun joinEntityInSurroundings(p0: wrapped.net.minecraft.entity.Entity?){  WrapManager.call(theInstance, CNF_78561, "joinEntityInSurroundings", "(Lnet/minecraft/entity/Entity;)V", p0?.theInstance) }
	@JvmName("M1_updateEntities") fun updateEntities(){  WrapManager.call(theInstance, CNF_78561, "updateEntities", "()V") }
	@JvmName("M1_setThunderStrength") fun setThunderStrength(p0: Float?){  WrapManager.call(theInstance, CNF_78561, "setThunderStrength", "(F)V", p0) }
	@JvmName("M1_canSeeSky") fun canSeeSky(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "canSeeSky", "(Lnet/minecraft/util/BlockPos;)Z", p0) as Boolean? }
	@JvmName("M1_getRainStrength") fun getRainStrength(p0: Float?): Float?{ return WrapManager.call(theInstance, CNF_78561, "getRainStrength", "(F)F", p0) as Float? }
	@JvmName("M1_canBlockSeeSky") fun canBlockSeeSky(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "canBlockSeeSky", "(Lnet/minecraft/util/BlockPos;)Z", p0) as Boolean? }
	@JvmName("M1_setRainStrength") fun setRainStrength(p0: Float?){  WrapManager.call(theInstance, CNF_78561, "setRainStrength", "(F)V", p0) }
	@JvmName("M1_getLight") fun getLight(p0: Any?): Int?{ return WrapManager.call(theInstance, CNF_78561, "getLight", "(Lnet/minecraft/util/BlockPos;)I", p0) as Int? }
	@JvmName("M1_getLightFromNeighbors") fun getLightFromNeighbors(p0: Any?): Int?{ return WrapManager.call(theInstance, CNF_78561, "getLightFromNeighbors", "(Lnet/minecraft/util/BlockPos;)I", p0) as Int? }
	@JvmName("M1_notifyLightSet") fun notifyLightSet(p0: Any?){  WrapManager.call(theInstance, CNF_78561, "notifyLightSet", "(Lnet/minecraft/util/BlockPos;)V", p0) }
	@JvmName("M1_getLightBrightness") fun getLightBrightness(p0: Any?): Float?{ return WrapManager.call(theInstance, CNF_78561, "getLightBrightness", "(Lnet/minecraft/util/BlockPos;)F", p0) as Float? }
	@JvmName("M4_updateWeather") fun updateWeather(){  WrapManager.call(theInstance, CNF_78561, "updateWeather", "()V") }
	@JvmName("M1028_getRenderDistanceChunks") fun getRenderDistanceChunks(): Int?{ return WrapManager.call(theInstance, CNF_78561, "getRenderDistanceChunks", "()I") as Int? }
	@JvmName("M1_removeTileEntity") fun removeTileEntity(p0: Any?){  WrapManager.call(theInstance, CNF_78561, "removeTileEntity", "(Lnet/minecraft/util/BlockPos;)V", p0) }
	@JvmName("M1_isBlockFullCube") fun isBlockFullCube(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isBlockFullCube", "(Lnet/minecraft/util/BlockPos;)Z", p0) as Boolean? }
	@JvmName("M1_canBlockFreezeWater") fun canBlockFreezeWater(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "canBlockFreezeWater", "(Lnet/minecraft/util/BlockPos;)Z", p0) as Boolean? }
	@JvmName("M1_isDaytime") fun isDaytime(): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isDaytime", "()Z") as Boolean? }
	@JvmName("M1_canBlockFreezeNoWater") fun canBlockFreezeNoWater(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "canBlockFreezeNoWater", "(Lnet/minecraft/util/BlockPos;)Z", p0) as Boolean? }
	@JvmName("M1_getMoonPhase") fun getMoonPhase(): Int?{ return WrapManager.call(theInstance, CNF_78561, "getMoonPhase", "()I") as Int? }
	@JvmName("M1_checkLight") fun checkLight(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "checkLight", "(Lnet/minecraft/util/BlockPos;)Z", p0) as Boolean? }
	@JvmName("M1_getCurrentMoonPhaseFactor") fun getCurrentMoonPhaseFactor(): Float?{ return WrapManager.call(theInstance, CNF_78561, "getCurrentMoonPhaseFactor", "()F") as Float? }
	@JvmName("M1_getStrongPower") fun getStrongPower(p0: Any?): Int?{ return WrapManager.call(theInstance, CNF_78561, "getStrongPower", "(Lnet/minecraft/util/BlockPos;)I", p0) as Int? }
	@JvmName("M1_getDebugLoadedEntities") fun getDebugLoadedEntities(): String?{ return WrapManager.call(theInstance, CNF_78561, "getDebugLoadedEntities", "()Ljava/lang/String;") as String? }
	@JvmName("M1_isBlockPowered") fun isBlockPowered(p0: Any?): Boolean?{ return WrapManager.call(theInstance, CNF_78561, "isBlockPowered", "(Lnet/minecraft/util/BlockPos;)Z", p0) as Boolean? }
	companion object {
		val CNF_78561 = "net.minecraft.world.World"
		val originalClass: Class<*> @JvmName("ORIGIN_68587") get() = WrapManager.origin(CNF_78561)
		@JvmName("M9_doesBlockHaveSolidTopSurface") fun doesBlockHaveSolidTopSurface(p0: Any?, p1: Any?): Boolean?{ return WrapManager.call(null, CNF_78561, "doesBlockHaveSolidTopSurface", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/BlockPos;)Z", p0,p1) as Boolean? }
	}
}